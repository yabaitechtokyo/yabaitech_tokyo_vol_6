@require: pervasives
@require: list
@require: color
@require: gr
@require: vdecoset

module Code2 : sig

  val +code : [string] block-cmd
  val +console : [string] block-cmd
  val \code : [string] inline-cmd
  val \console : [string] inline-cmd
  val \d-code : [string] inline-cmd

end = struct
  
  let code-fill-color = Gray(0.925)
  let code-stroke-color = Gray(0.925)
  let console-fill-color = Gray(0.25)


  let decoset-code =
    VDecoSet.simple-frame 1pt code-stroke-color code-fill-color


  let dummy _ =
    let strokef = stroke 1pt code-stroke-color in
    let gr-back x y w d h =
      fill code-fill-color (Gr.rectangle (x, y -' d) (x +' w, y +' h))
    in
    let decoS (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.rectangle (x, y -' d) (x +' w, y +' h));
      ]
    in
    let decoH (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.poly-line (x, y -' d) [(x, y +' h); (x +' w, y +' h); (x +' w, y -' d);])
      ]
    in
    let decoM (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.line (x, y -' d) (x, y +' h));
        strokef (Gr.line (x +' w, y -' d) (x +' w, y +' h));
      ]
    in
    let decoT (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.poly-line (x, y +' h) [(x, y -' d); (x +' w, y -' d); (x +' w, y +' h)])
      ]
    in
      (decoS, decoH, decoM, decoT)


  let decoset-console =
    let deco (x, y) w h d =
      [ fill console-fill-color (Gr.rectangle (x, y -' d) (x +' w, y +' h)) ]
    in
      (deco, deco, deco, deco)


  let set-code-font ctx =
    ctx |> set-font Latin (`lmmono`, 1., 0.)
        |> set-hyphen-penalty 100000


  let scheme decoset txtcolor ctx code =
    let pads = (10pt, 10pt, 10pt, 10pt) in
    block-frame-breakable ctx pads decoset (fun ctx -> (
      let fontsize = get-font-size ctx in
      let ctx = ctx |> set-code-font
        |> set-leading (fontsize *' 1.5) in
      let charwid = get-natural-width (read-inline ctx {0}) in
      let ctx-code =
        ctx |> set-space-ratio (charwid /' fontsize) 0. 0.
            |> set-text-color txtcolor
            |> set-font-size (fontsize *' 0.9)
      in

      let lstraw = split-into-lines code in
      let lst =
        match lstraw with
        | []        -> lstraw
        | x :: []   -> lstraw
        | _ :: tail -> tail
      in
      let ib-code =
        lst |> List.fold-left-adjacent (fun ibacc (i, s) _ optnext -> (
          let ib-last =
            match optnext with
            | Some(_) -> inline-fil ++ discretionary 0 (inline-skip ((get-text-width ctx) *' 2.)) inline-nil inline-nil
            | None    -> inline-fil
          in
          let ib =
            inline-skip (charwid *' (float i))
              ++ read-inline ctx-code (embed-string s)
              ++ ib-last
          in
            ibacc ++ ib
        )) inline-nil
      in
        line-break true true ctx ib-code
    ))


  let-block ctx +code code =
    scheme decoset-code (Gray(0.12)) ctx code


  let-inline ctx \d-code code =
    inline-fil ++ embed-block-breakable ctx
      (read-block ctx '<+code(code);>)


  let-block ctx +console code =
    scheme decoset-console Color.white ctx code


  let-inline ctx \console code =
    inline-fil ++ embed-block-breakable ctx
      (read-block ctx '<+console(code);>)


  let-inline ctx \code code =
    script-guard Latin
      (read-inline (ctx |> set-code-font) (embed-string code))

end
