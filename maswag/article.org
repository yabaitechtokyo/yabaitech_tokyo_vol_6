#+TITLE: GNU EmacsでLaTeX文書を書く話
#+AUTHOR: MasWag

* COMMENT Related documents

** http://mtino1594.hatenablog.com/entry/2019/04/07/200000

* はじめに

** Emacs、GNU Emacsとは

#+begin_quote
メロスにはLispがわからぬ。
#+end_quote

時は200X年、*nix業界ではvi/VimとEmacs系というテキストエディタ界の二大巨塔で争う、エディタ戦争というエクストリームスポーツがあった\footnote{2000年代にはまだAtomもVSCodeもなく、やっと2008年にSublime Textが登場した頃なのであった}。
viは遥か遠い昔にedというラインエディタから派生して登場したスクリーンエディタでVimはそのviの派生、Emacs系のテキストエディタというのはこれまた遥か遠い昔にTECOというラインエディタと関係して生まれたスクリーンエディタであるオリジナルのEmacsやその代替のエディタであり、vi/VimとEmacs系エディタの両者の派閥が云々…

という話は本記事の本題ではないのでこれ以上深追いしないでおきます。
本来単にEmacsと書いた場合GNU Emacs以外にも例えばMicroEMACSなどを含むEmacs系のエディタ全般を指しますが、本記事ではGNU Emacs以外の話はしないので、以下GNU Emacsのことを単にEmacsと書きます。
\footnote{というのは変な突っ込みが入らないための単なるおまじないであり、今時Emacsと言われてGNU Emacs以外のエディタの事を考える人はほぼいないでしょう}
GNU EmacsはEmacs LispというLisp方言で拡張を行うことができ様々な拡張機能が実装されてはいるものの、  筆者を含めEmacs LispやEmacsの拡張機能のエコシステムに詳しくない人にはなかなか取っ付き辛いです。

** COMMENT +みんなが訳わからん秘伝のタレを持っており+

** LaTeXとは

#+begin_quote
吾輩はてふである。名前はまだ無い。

どこで生れたか頓と見當がつかぬ。何でも薄暗いじめじめした所でニヤーニヤー泣いて居た事丈は記憶して居る。吾輩はこゝで始めて組版処理システムといふものを見た。然もあとで聞くとそれはTeXといふ組版処理システム中で一番獰悪な種族であつたさうだ。
#+end_quote

LaTeXは組版処理システムである。筆者はLaTeXのことは良くわからないですし今回の記事の本題でもないので、これ以上のLaTeXの説明はWikipediaやTeX wikiを参照してください。
SATySFiという型も付いていて比較的全うな組版処理システムを使っておきながらなぜLaTeXを使う話を書いているのか、という気もしますが、出版社や学会の定型フォーマットに従わなければならない場合、今日SATySFiのテンプレートが提供されているケースはまずないので結局LaTeXを使わなければならない場面はかなり多いです。
仮に文書の書式が自由であっても、複数人で文書を書く場合には、全員がSATySFiで文書を書ける弊サークルの様な例外を除いては、皆がある程度扱うことのできる組版処理システムと云うことでLaTeXを採用することも少なくないでしょう。
\footnote{実は弊サークルでも最初期にはLaTeXを使うという案もありました}

** この文書は何?

本記事ではEmacs系エディタの中でもかなり長い間主流として使われているGNU Emacsの上でLaTeXの文書を書く際の設定について扱います。
前述の通り GNU EmacsではEmacs Lispを使って様々な拡張機能を書くことや設定を行うことができますが、Emacs Lispに詳しくない人にとっては自分で一から書くのは大変です。また、どんな便利なパッケージがあるかなどの情報を得るのも頑張って調べる必要があります。この記事では「とりあえずこういう設定をするとそれなりに良いぞ」というものを見せることを目的とします。これが最善の方法ではないと思いますし、そもそも各人で最適な設定は異なると思いますが、自分にとって使いやすい設定を探す上で役立つと幸いです。

* おことわり

本記事ではLaTeX及びBiBTeXというものを聞いたことがあったり、最低限の使い方を知っていることを前提にしています。これらの使い方がわからない場合はTeX Wikiの[[https://texwiki.texjp.org/?LaTeX%E5%85%A5%E9%96%80][LaTeX入門]]の記事等を参考にしてください。

また、本記事ではEmacs Lispの細かい言語機能などの知識は仮定しませんが\footnote{そもそも筆者自身もがEmacs Lispの詳細をわかっていないです}、Emacsの使い方を最低限理解していることは前提としています。
例えばメジャーモードとマイナーモード等の用語や、 =M-x= や =C-c= などの良くEmacsの説明で使う表記は前置きなく使います。Emacsの初心者向けの説明は、例えば Emacs JP にある[[https://emacs-jp.github.io/tips/emacs-in-2020][入門記事]]を参照してください。

本記事の内容はGUI版のGNU Emacs 27で動作確認を行っています。古い版のEmacsでは動かないものもあるかもしれませんし、Spacemacs等での動作確認も行っていません。また、mac OSとLinuxで動作確認をしていますが、Windowsでは(持ってないので)動作確認を行っていません。

また、本記事の内容は後日別途無償公開する可能性が多いにあります。また、本記事で紹介している設定を纏めた =init.el= は hogehogefugafugaからダウンロードできます。

* 下ごしらえ

** =package.el=

Emacsのパッケージのインストールは[[https://emacs-jp.github.io/packages/package][package.el]]を使います。package.elはEmacs 24以降では標準搭載されているパッケージ管理ツールです。一応Emacs 23でも自分でインストールすることでpackage.elを使うことは可能ですが、特殊な事情がある場合を除いて新しいEmacsを使う方が良いと思います。

Emacs 24以降向けのpackage.elの設定方法は以下の様になります。

#+NAME: PACKAGE
#+BEGIN_SRC elisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (package-refresh-contents)
#+END_SRC

** =use-package=

Emacsのパッケージの設定には[[https://github.com/jwiegley/use-package][use-package]]を使います。(use-packageの登場以前の様に) =(require ...)= =(autoload ...)= の様な生のEmacs Lispを使って設定をすることも可能ですが、use-packageを使うとマクロを使ってより簡潔に設定を書くことができます。\footnote{筆者はまだ使ったことがないですが、今時はuse-packageではなく [[https://github.com/conao3/leaf.el][leaf.el]] の方が良いかもしれないです。この様に流行のパッケージが移り変るのも最適にEmacsを設定することを難しくしています。}

use-packageのインストール及び設定方法は以下の様になります。

#+NAME: USE_PACKAGE
#+BEGIN_SRC elisp
  (package-install 'use-package)
  (require 'use-package)
#+END_SRC

* YaTeX (野鳥): 筆者おすすめのLaTeX用メジャーモード

[[https://www.yatex.org/][YaTeX]] (Yet Another TeX mode for Emacs、野鳥)は筆者が長年使っているLaTeX用のメジャーモードです。Emacsには標準でTeX modeも搭載されていますが、YaTeXの方がより高機能です。YaTeXと並んでAUCTeXも人気があるLaTeX用メジャーモードの様ですが、筆者は使ったことがありません。

** 補完

YaTeXは様々な場面でLaTeXのコマンドを補完することができます。詳細は[[https://www.yatex.org/~yuuji/bin/info2www.cgi?(yatexj)Completion][公式ドキュメント]]にありますが、以下ではその中でも特に良く使うものを紹介していきます。

*** section型補完: =\foo{...}=: C-c C-s

section型補完は =\コマンド名{...}= の形式のLaTeXコマンドの補完に用います。名前の通り =\section{...}= や、 =\documentclass{...}= 、 =\ref{...}= 、 =\cite{...}= などの例があります。
section型補完を行う場合は、 =C-c C-s= を打つと補完すべきLaTeXコマンドを聞かれるので、入力します。 =\section{...}= の様に単にコマンド名 + 内容を入力するものの場合はこれで終了ですが、 =\documentclass{...}= の様にオプションを指定できるLaTeXコマンドや =\ref{...}= の様にこれまでに設定したラベルを選択するものの場合、追加でオプションを聞かれたり既存のラベルを選択する画面が表示されたりします。

また、section型補完ではありませんが、例えば =\section{foo}= を =\subsection{foo}= に変更するなど、既に使われているコマンドを別のものに変更したい場合には、 =\section= の部分で =C-c C-c= を打つことでコマンドの置き換えができます。

*** begin型補完: =\begin{foo}...\end{foo}=: C-c C-b

begin型補完は =\begin{環境名}...\end{環境名}= の形式の入力の補完に用います。 =\begin{document}...\end{document}= や、 =\begin{itemize}...\end{itemize}= 、 =\begin{figure}...\end{figure}= 、 =\begin{tabular}...\end{tabular}= などの例があります。
begin型補完を行う方法は、 =C-c C-b= に続けて環境名に対応した一文字を打つ方法と、 =C-c C-b SPC= を打った後に補完すべき環境名を聞かれるので、適宜入力する方法の二種類があります。前者の方がタイプ数が少ないので一見便利そうですが、予め指定された少ない数の環境名にしか対応していないため、実際には =C-c C-b SPC= を使う場面の方が多いです\footnote{個人の感想です}。

また、section型補完と同様に、例えば =\begin{figure}...\end{figure}= を =\begin{wrapfigure}...\end{wrapfigure}= に変更するなど、既に使われている環境を別のものに変更したい場合には、 =\begin{foo}= や =\end{foo}= の部分で =C-c C-c= を打つことでコマンドの置き換えができます。

*** maketitle型補完: =\foo= : C-c C-m

maketitle型補完は =\foo= の形式の入力の補完に用います。 =\maketitle= や =\newpage= などの例があります。section型補完やbegin型補完と比べると使用頻度は少ないですが、 =C-c C-s= の代わりに =C-c C-m= を打つことで、概ねsection型補完と同様に使うことができます。

*** 数式記号・ギリシャ文字補完

数式中で =;= や =:= を打つことでそれぞれ数式記号やギリシャ文字を補完することができます。特に数式記号については数式記号の形に即した入力で補完することができ、例えば =;= に続けて =o= を打つと =\circ= が、 =oo= を打つと =\infty= が、 =x= を打つと =\times= が補完されます。詳細なコマンドについては =;= や =:= に続けて =<tab>= を打つことで表示することができます。

** [[https://www.yatex.org/~yuuji/bin/info2www.cgi?(yatexj)Invocation][プロセス起動]]: C-c C-t

=C-c C-t= を打つことで =latex= や =bibtex= などの組版やプレビューアのプロセスを起動することができます。詳細は[[https://www.yatex.org/~yuuji/bin/info2www.cgi?(yatexj)Invocation][公式ドキュメント]]にありますが、以下が良く使うと思います。

- LaTeX の起動: =C-c C-t j=
  - 筆者は =platex= や =pdflatex= を直接呼ぶのではなく =latexmk= を呼ぶ様に設定することで、別途dvipdfmx等を呼ばずにPDFをコンパイルでき、さらにlatexmkに変更を監視させることで自動で再コンパイルされる様にしています。
- PDFやdvi等のプレビュー: =C-c C-t p=
  - =latex= や =platex= 等でdviを生成してプレビューする場合は =xdvi= 等を起動する必要がありますが、筆者はPDFをプレビューしているので =Skim= や =evince= を起動する様に設定しています。

** 対応する場所へのカーソルジャンプ: C-c C-g

YaTeXでは =\begin{foo}...\end{foo}= の =\begin{foo}= の部分と =\end{foo}= や =\ref{foo}= と =\label{foo}= の様に対応した部分の行き来を =C-c C-g= で行うことができます。なお、 =\ref{foo}= と =\label{foo}= のジャンプはできますが、どうやら =\cref{foo}= と =\label{foo}= のジャンプは上手く動かない様です。

** use-packageによる設定法

use-packageによるYaTeXのインストール及び設定は以下の様になります。

#+NAME: YATEX
#+BEGIN_SRC elisp
  (use-package yatex
    ;; YaTeX がインストールされていない場合、package.elを使ってインストールする
    :ensure t
    ;; :commands autoload するコマンドを指定
    :commands (yatex-mode)
    ;; :mode auto-mode-alist の設定
    :mode (("\\.tex$" . yatex-mode)
           ("\\.ltx$" . yatex-mode)
           ("\\.cls$" . yatex-mode)
           ("\\.sty$" . yatex-mode)
           ("\\.clo$" . yatex-mode)
           ("\\.bbl$" . yatex-mode))
    :init
    (setq YaTeX-inhibit-prefix-letter t)
    ;; :config キーワードはライブラリをロードした後の設定などを記述します。
    :config
    (setq YaTeX-kanji-code nil)
    (setq YaTeX-latex-message-code 'utf-8)
    (setq YaTeX-use-LaTeX2e t)
    (setq YaTeX-use-AMS-LaTeX t)
    (setq tex-command "/Library/TeX/texbin/latexmk -pdf -pvc -view=none")
    (setq tex-pdfview-command "/usr/bin/open -a Skim")
    (auto-fill-mode 0)
    ;; company-tabnineによる補完。companyについては後述
    (set (make-local-variable 'company-backends) '(company-tabnine)))
#+END_SRC

* RefTeX: 参照挿入のためのマイナーモード

[[https://www.gnu.org/software/auctex/reftex.html][RefTeX]]は =\ref{...}= / =\cref{...}= \footnote{ちなみにcleverefパッケージを使うことで cref を使った賢い相互参照ができます。}
や =\cite{...}= といった参照関係のコマンドを検索して挿入するためのマイナーモードです。個人的な経験としては、複数のファイルに分割して文書を書く場合に検索に失敗することがありますが、単一ファイルで文章を書く際は概ね問題なく動いている様です。

以下のコマンドを良く使います。詳細は[[https://www.gnu.org/software/auctex/manual/reftex.index.html][公式マニュアル]]を参照してください。

- =\ref{...}= / =\cref{...}= の挿入: =C-c (=
- =\cite{...}= の挿入: =C-c [=

** use-packageによる設定法

use-packageによるRefTeXの設定は以下の様になります。RefTeXはEmacs 24.3以降ではEmacsに同梱されているので別途インストールせずに使うことができます。

#+NAME: REFTEX
#+BEGIN_SRC elisp
  (use-package reftex
    :ensure nil
    :hook (yatex-mode . reftex-mode)
    :bind (:map reftex-mode-map
                ("C-c (" . reftex-reference)
                ("C-c )" . nil)
                ("C-c >" . YaTeX-comment-region)
                ("C-c <" . YaTeX-uncomment-region))
    :defer t
    :custom
    ;; \ref ではなく \cref を使うための設定
    (reftex-ref-style-default-list '("Cleveref") "Use cref/Cref as default"))
#+END_SRC

* [[https://github.com/cpitclaudel/biblio.el][biblio.el]]: 書誌情報のWeb検索機能

  [[https://github.com/cpitclaudel/biblio.el][biblio.el]]を使うことで書誌情報をWeb上で検索して、例えば[[https://ja.wikipedia.org/wiki/BibTeX][BibTeX]]のエントリーをダウンロードしてファイルに挿入することや =kill-ring= にコピーすることができます。それ以外にも (個人的にはほぼ使いませんが) 検索結果の画面をブラウザで開くこともできます。検索サイトとしてarXiv、CrossRef、DBLP、HAL、IEEE Exploreに対応している様ですが、個人的には専らDBLPを使っています。

** 個人的に良く使う使い方

以下では一度 =biblio-lookup= を呼ぶことで使いたい検索サイトの選択画面を表示させていますが、 =M-x biblio-dblp-lookup= 等で直接検索サイトを指定することもできます。

1. BibTeXのエントリーを挿入したい場所に移動する。
2. =M-x biblio-lookup= で =biblio-lookup= を呼び、使いたい検索サイトを選択。
3. 検索文字列を聞かれるので入力。
4. 検索結果が表示されるので =i= または =I= で挿入する。

** =package.el= によるインストール方法

biblio.elは特別な設定をしなくても動くので、個人的には use-package を使わずに単にpackage.elを使ってインストールしています。例えば =M-x package-list-packages= からbiblioを選択してインストールすれば大丈夫です。Emacs Lispを使って自動でインストールする場合は以下の様になります。

#+NAME: BIBLIO
#+BEGIN_SRC elisp
(package-install 'biblio)
#+END_SRC

* company-mode: 補完用マイナーモード

company-modeはEmacsの補完用マイナーモードです。IDEによく付いてくる補完機能と同じ様なものだと思って差し支えないでしょう。一昔前はauto-complteが良く使われていましたが、現在はcompany-modeの方が良く使われている様です。

プログラムを書く場合に補完するのは変数名や関数名ですが、LaTeXの文章を書く場合には主に英単語を補完したいです。英単語の補完方法には幾つかありますが、ここではTabNineという人工知能による補完を =company-tabnine= を使います\footnote{ TabNineを使った補完以外にも、より以前から使われてきたスペルチェッカーの辞書を使った補完 (company-ispell)も良く動きます。}。

** use-packageによる設定法

use-packageによるcompany-mode及びcompany-tabnineの設定は以下の様になります。なお、初回起動時には =M-x company-tabnine-install-binary= でTabNineのバイナリをインストールする必要があります。

#+NAME: COMPANY
#+BEGIN_SRC elisp
  (use-package company
    :ensure t
    :config
    (global-company-mode)
    ;; 遅延なしにする。
    (setq company-idle-delay 0)
    ;; デフォルトは4。より少ない文字数から補完が始まる様にする。
    (setq company-minimum-prefix-length 2)
    ;; 候補の一番下でさらに下に行こうとすると一番上に戻る。
    (setq company-selection-wrap-around t)
    ;; 番号を表示する。
    (setq company-show-numbers t)
    :bind (:map company-active-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)
                ("C-s" . company-filter-candidates)
                ("<tab>" . company-complete-selection))
    :bind (:map company-search-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)))
  (use-package company-tabnine 
    :ensure t
    :init
    (add-to-list 'company-backends #'company-tabnine))
#+END_SRC
    
* Ispell: 対話的スペルチェック

Emacsでは対話的なスペルチェックを行うこともできます。古典的にはIspellが使われていたために、Emacsでは対話的スペルチェックのコマンドもIspellと呼ばれていますが、現代では後継のAspellやHunspellが主流となっています。

** Ispellの使い方

Ispellには幾つかの使い方がありますが、 =M-x ispell= で =ispell= を呼ぶのが基本的な使い方です。 ispellはスペルチェックの結果辞書にない単語を見つけると、置換候補を画面上方に表示するので、選択すると置き換えられます。無視したい場合は =<SPC>= を入力します。それ以外にも当該バッファのみの辞書に追加する等も可能なので、詳細な使い方は置換対象の選択画面で =C-h= か =?= を入力して確認してください。
 =M-x ispell= では基本的にバッファ全体に対してスペルチェックを行いますが、リージョンがアクティブな場合はアクティブなリジョンに対してのみスペルチェックを行います。また、1単語に対してスペルチェックを行いたい場合は =M-$= を打ちます。

** use-packageによる設定法

use-packageによるispellの設定は以下の様になります。ispellはEmacsに同梱されているので別途インストールせずに使うことができます。ここではスペルチェッカとしてaspellを使う設定をしているので、システムにインストールされていない場合は別途aspellのインストールも必要です。

#+NAME: ISPELL
#+BEGIN_SRC elisp
  (use-package ispell
    :init
    ;; スペルチェッカとしてaspellを使う
    (setq ispell-program-name "aspell")
    :config
    ;; 日本語の部分を飛ばす
    (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
#+END_SRC

* [[https://www.emacswiki.org/emacs/FlySpell][FlySpell]]: リアルタイムスペルチェッカ

Ispellでは対話的なスペルチェックを行うことができますが、FlySpellを使うことで他の多くのテキストエディタと同様にリアルタイムのスペルチェックも行うことができます。筆者は試したことがないですが、多分ispellかaspellがシステムにインストールされていないと動かないと思います。

** use-packageによる設定法

use-packageによるFlySpellの設定は以下の様になります。

#+NAME: FLYSPELL
#+BEGIN_SRC elisp
(use-package flyspell
  ;; flyspellをインストールする
  :ensure t
  ;; YaTeXモードでflyspellを使う
  :hook (yatex-mode . flyspell-mode))
#+END_SRC

* [[https://github.com/winterTTr/ace-jump-mode][Ace Jump Mode]]: カーソルジャンプ用マイナーモード

[[https://github.com/winterTTr/ace-jump-mode][Ace Jump Mode]]を使うことでバッファ中の「任意の場所」に一瞬でジャンプできる様になります。「任意の場所」というのは具体的には: 1) 単語の先頭の文字、2)単語の先頭以外も含む文字、3) 行のどれかになります。これらを数タイプで指定することでジャンプできるため、カーソル移動の時間がかなり短かくなります。但し英文を書いている場合は結構本当に2ストロークで画面中のほぼ全ての場所に移動できますが、日本語を書いている場合は文字指定に難があるので、画面中のほぼ全ての「行」に飛べるくらいが本当のところになります。
英文を書く場合には、単語の先頭以外も含む文字だと候補が多くなりすぎて必要なタイプ数が増えてしますので、単語の先頭の文字を指定するのが使い勝手が良いです。

** 使い方

Ace Jump Modeでは、以下のコマンドに続いて飛びたい先の文字を入力すると、その文字に指定するための文字が表示されるので、その文字を入力して位置を指定することでジャンプすることができます。なお行指定については最初から各行に文字が表示されるのでそれらの文字を入力することで行を指定することができます。

- 単語の先頭の文字: =C-c j [key]=: (または =M-x ace-jump-word-mode=)
- 単語の先頭以外も含む文字: =C-u C-c j [key]= : (または =M-x ace-jump-char-mode=)
- 行: =C-u C-u C-c j [key]= : (または =M-x ace-jump-line-mode=)

前述の様に英語の文書を書く場合は =C-c j= の単語先頭の文字指定が重宝します。一方で日本語の場合文字指定が大変なので =C-u C-u C-c j= の行指定によるジャンプが重宝します。

** use-packageによる設定法

use-packageによるAce Jump Mode設定は以下の様になります。ここでは =C-c j= で =ace-jump-mode= を呼び出す様に設定していますが、他のキーバインドが良い場合は適宜設定してください。

#+NAME: ACE_JUMP
#+BEGIN_SRC elisp
(use-package ace-jump-mode
  :ensure t
  :bind (("C-c j" . ace-jump-mode)))
#+END_SRC

* [[https://ayatakesi.github.io/emacs/25.1/Position-Registers.html][Position Registers]]: 多分無名な標準機能

Emacsには標準の機能として[[https://ayatakesi.github.io/emacs/25.1/Registers.html][レジスター]]があります。レジスターを使うことで、各文字 (数字や英字)に一つ、テキストやウインドウの設定などを一時的に保存できます。ここでは特にレジスターにバッファ上の位置を保存すること使い方を紹介します。

レジスターではバッファ上の位置を上手く記憶することができるので、例えば次の様な使い方ができます。

1. LaTeX文章を書いている途中でプリアンブルを編集したくなる
2. 現在編集している場所をレジスターに保存する
3. 適宜プリアンブルを編集する
4. レジスターに保存されている場所に戻る

また、EmacsのPosition Registersではバッファ上の位置を保存して、別のバッファからでも移動することができます。そのため例えば書誌情報を編集するために.bibファイルを編集した後でメインの文書ファイルの特定位置に戻る、といった使い方もできます。

なお、Position RegistersはEmacsの標準機能なので特に設定を行う必要はありません。

** Position Registersの使い方

Position registerの使い方は以下の様にとてもシンプルです。

- =C-x r SPC [レジスター]= で指定したレジスターに現在位置を記録
- =C-x r j [レジスター]= でレジスターに記録されている位置にジャンプ


* [[https://www.flycheck.org/en/latest/][Flycheck]]: Emacsの構文チェッカ

FlycheckはEmacsの構文チェッカです。プログラムを書く際は型チェックを通したりlintに構文を確認させたりするために使いますが、ここでは[[https://www.nongnu.org/chktex/][chktex]]や[[https://ctan.org/pkg/lacheck][lacheck]]など(La)TeX用のlintの設定を紹介します。
正直なところFlycheckが無くてもあまり困ることはありませんが、たまに括弧対応などの有益な指摘をしてくれることがあります。一方で数式中で半開区間が表われた場合の様に意図して括弧を対応させていない場合にもlintが指摘するため、lintの結果の扱いには注意が必要です。

** 使い方

以下の設定を行った場合、 =M-n= や =M-p= で前後のエラー箇所にジャンプすることができます。また、エラー上にカーソルがある場合、エラーの説明文が表示されます。

- =M-n= (=flycheck-next-error=): 直後のエラー箇所にジャンプ
- =M-p= (=flycheck-previous-error=): 直前のエラー箇所にジャンプ

** use-packageによる設定法

#+NAME: FLYCHECK
#+BEGIN_SRC elisp
  (use-package flycheck
    :ensure t
    :hook (after-init . global-flycheck-mode)
    :config
    (flycheck-add-mode 'tex-chktex 'yatex-mode)
    (flycheck-add-mode 'tex-lacheck 'yatex-mode)
    ;; chktexが自動で見付からない場合は以下の様に指定する。lacheckについても同様
    (setq flycheck-tex-chktex-executable "/Library/TeX/texbin/chktex")
    :bind (:map flycheck-mode-map
              ("M-n" . flycheck-next-error)
              ("M-p" . flycheck-previous-error)))
#+END_SRC

* まとめ

*いかがだったでしょうか!!*

今回はGNU EmacsでLaTeX文書を書くための設定の一例を紹介しました。今回の方法が最適解であるかはさておき、GNU EmacsをLaTeX文書を書くために設定する際のたたき台になると幸いです。

* COMMENT 設定ファイル

#+BEGIN_SRC elisp :tangle init.el :noweb yes
<<PACKAGE>>
<<USE_PACKAGE>>
<<COMPANY>>
<<YATEX>>
<<REFTEX>>
<<BIBLIO>>
<<FLYCHECK>>
<<ISPELL>>
<<FLYSPELL>>
<<ACE_JUMP>>
#+END_SRC
